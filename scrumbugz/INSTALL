 Deploy Scrumbugz in Django on Apache with Virtualenv and mod_wsgi
and Setup Celery Task Queue for Bug Sync
 
 Install Pip
 sudo apt-get install python-pip python-dev build-essential
 
 Upgrade Pip
 sudo pip install --upgrade pip
 
 Install Setuptools
 sudo wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py -O - | sudo python

 Install VirtualenvWrapper
 sudo pip install virtualenvwrapper
 
 cd /usr/local/
 sudo git clone https://github.com/ChristopherHJohnson/scrumbugz.git
 sudo chown -R chjohnson scrumbugz
 mv scrumbugz django
 
 Setup Python Virtual Environment
 cd django/scrumbugz
 virtualenv venv
 source venv/bin/activate
 
 Install Python Dependencies
 pip install -r requirements-dev.txt
 
Initialize Django Project (appends [PROJECT_DIR] to $sys.path 
cd ..
django-admin.py startproject scrumbugz .

sudo mv settings-dist.py settings.py
EDIT settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql', # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.
        'NAME': 'scrumbugs',                      # Or path to database file if using sqlite3.
        'USER': 'root',                      # Not used with sqlite3.
        'PASSWORD': '*****',                  # Not used with sqlite3.
        'HOST': 'localhost',                      # Set to empty string for localhost. Not used with sqlite3.
        'PORT': '3306',                      # Set to empty string for default. Not used with sqlite3.
    }
}

Install Mysql
sudo apt-get install mysql-server
sudo apt-get install python-mysqldb
sudo apt-get install libmysqlclient-dev

pip install mysql-python

pip install python-memcached

mysql -u root -p
CREATE DATABASE scrumbugs;
GRANT ALL ON scrumbugs.* TO 'root'@'localhost' IDENTIFIED BY '*****';

Populate Database and Initiate settings.py
./manage.py syncdb
./manage.py migrate

 Install Apache
 sudo apt-get install apache2 apache2.2-common apache2-mpm-prefork apache2-utils libexpat1 
 
 Install WSGI
 sudo apt-get install libapache2-mod-wsgi
 
 Install Rabbit MQ
 sudo apt-get install rabbitmq-server

 Setup Apache
 cd /var/www
 mkdir scripts media static
 cd /etc/apache2/sites-available
 
 Copy Static Files
 cp -R /usr/local/django/scrumbugz/static /var/www/static
 cp -R /usr/local/django/scrumbugz/venv/lib/python2.7/site-packages/django/contrib/admin/static/admin /var/www/static
 cp -R /usr/local/django/scrumbugz/venv/lib/python2.7/site-packages/django_browserid/static/browserid/static/browserid /var/www/static

 Setup Virtual Host
 cd /etc/apache2/sites-available
 sudo mv default sb
 sudo nano sb
 
Apache conf file (/etc/apache2/sites-available/sb)
 --------------begin sb.conf
 <VirtualHost *:80>
        Alias /robots.txt /var/www/static/robots.txt
        Alias /favicon.ico /var/www/static/favicon.ico

        AliasMatch ^/([^/]*\.css) /var/www/static/styles/$1

        Alias /media/ /var/www/media/
        Alias /static/ /var/www/static/


        ServerName wmflabs.org
        ServerAlias wmde.wmflabs.org
        WSGIScriptAlias / /var/www/scripts/wsgi.py

DocumentRoot /var/www
        <Directory "/var/www">
                Options +Indexes +FollowSymLinks
                AllowOverride All
                Order deny,allow
                Allow from all
        </Directory>

        <Directory "/var/www/static">
                Order deny,allow
                Allow from all
        </Directory>

         <Directory "/var/www/media">
                Order deny,allow
                Allow from all
        </Directory>
</VirtualHost>
 --------------end sb.conf

WSGI.PY (put in /var/www/scripts)
--------------start WSGI.py
import os
import sys
import site

# Add the site-packages of the chosen virtualenv to work with
site.addsitedir('/usr/local/django/scrumbugz/venv/local/lib/python2.7/site-packages')

# Add the app's directory to the PYTHONPATH
sys.path.append('/usr/local/django')
sys.path.append('/usr/local/django/scrumbugz')

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")

# Activate your virtual env
activate_env=os.path.expanduser("/usr/local/django/scrumbugz/venv/bin/activate_this.py")
execfile('/usr/local/django/scrumbugz/venv/bin/activate_this.py', dict(__file__='/usr/local/django/scrumbugz/venv/bin/activate_this.py'))

import django.core.handlers.wsgi
application = django.core.handlers.wsgi.WSGIHandler()
--------------end WSGI.py

sudo a2dissite default
sudo a2ensite sb

CELERY CONF
Install Supervisor
sudo easy_install supervisor
sudo mkdir /etc/supervisord
---------------start supervisord.conf

[unix_http_server]
file=/tmp/supervisor.sock   ; (the path to the socket file)

[supervisord]
logfile=/var/log/supervisord/main.log ; (main log file;default $CWD/supervisord.log)
logfile_maxbytes=50MB        ; (max main logfile bytes b4 rotation;default 50MB)
logfile_backups=10           ; (num of main logfile rotation backups;default 10)
loglevel=info                ; (log level;default info; others: debug,warn,trace)
pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)
nodaemon=false               ; (start in foreground if true;default false)
minfds=1024                  ; (min. avail startup file descriptors;default 1024)
minprocs=200                 ; (min. avail process descriptors;default 200)
childlogdir=/var/log/supervisord            ; ('AUTO' child log dir, default $TEMP)

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket

[include]
files = /etc/supervisord/conf.d/*.conf
------------------end supervisord.conf

sudo mkdir /etc/supervisord
cp supervisord.conf /etc/supervisord
sudo mkdir /etc/supervisord/conf.d
sudo cp scrumbugz-celery.conf /etc/supervisord/conf.d
create  /var/log/supervisord and /var/log/celery
sudo chown chjohnson supervisord

#start supervisord
supervisord -c /etc/supervisord/supervisord.conf
#stop supervisord
sudo supervisorctl -c /etc/supervisord/supervisord.conf shutdown

